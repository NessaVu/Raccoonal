<html>

<head>
	<title>Raccoonal Home</title>

	<!-- CSS -->
	<link rel="stylesheet" href="../css/bootstrap.min.css">
	<link rel="stylesheet" href="../css/style.css">

	<!-- Fonts -->
	<link href="https://fonts.googleapis.com/css?family=Sniglet" rel="stylesheet">

	<!-- JS -->
	<script src="../js/jquery-3.3.1.min.js"></script>
	<script src="../js/bootstrap.js"></script>
	<script src="https://download.affectiva.com/js/3.1/affdex.js" type="text/javascript"> </script>
	<script src="../js/easytimer.min.js"></script>
	<script src="../js/canvasjs.min.js"></script>
</head>

<body>

	<canvas class="game">
		
	</canvas>

	<div class="content">
		<div class="login">
			<h1>Raccoonal Journal</h1>
			<h2>Login</h2>
			<div class="userInput">
				<div class="userName">
					<h3>User name:</h3>
					<input type="input" id="userNameBox">
				</div>
				<div class="password">
					<h3>Password:</h3>
					<input type="password" id="passwordBox">
				</div>
			</div>
			<button type="button" id="loginButton">Submit!</button>
		</div>

		<button type="button" id="startScanButton">Scan</button>
		<div class="modal" id="startScanDiv">
			<div class="modalMessage">
				<p>
					Think about what you did just now
					<br>
					<br> Let's scan your face for 10s!
				</p>
			</div>
			<div class="modalButton">
				<button type="button" id="scanLaterButton">Later</button>
				<button type="button" id="scanOkButton">OK</button>
			</div>
		</div>

		<div class="scanningModal" id="scanningDiv">
			<p id="countdownMessage">Scanning... </p>
			<button type="button" id="scanStopButton">Stop</button>
			<p id="notCenteredMessage">Scanning Paused! Couldn't find your face!</p>
			<div class="affectivaTest" id="affdex_elements"></div>
			<button type="button" id="toggleCamButton">
				<img src="../images/toggle.png" alt="toggle">
			</button>
		</div>

		<div class="scanResultModal" id="scanResultDiv">
			<p>Done!</p>
			<div id="resultChartContainer"></div>
			<input type="text" placeholder="What are you thinking about..." id="resultMemo">
			<button type="button" id="resultDoneButton">Done</button>
		</div>
	</div>

	<div class="bar">
		<button type="button" class="menu" id="calendarButton" onclick="window.location='calendar.handlebars'">Calendar</button>
		<button type="button" class="menu" id="bookButton" onclick="window.location='book.handlebars'">Raccoon
			<br>Book</button>
		<button type="button" class="menu" id="homeButton" onclick="window.location='home.handlebars'">Yard</button>
		<button type="button" class="menu" id="emptyButton" disabled>Market
			<br>Coming Soon!</button>
		<button type="button" class="menu" id="settingButton" onclick="window.location='setting.handlebars'">Setting</button>
	</div>

	<!-- work flow-->
	<script>
		function log(node_name, msg) {
			$(node_name).text(msg);
		}

		//affectiva init
		var divRoot = $("#affdex_elements")[0];
		var width = 640;
		var height = 480;
		var isOn = false;

		var faceMode = affdex.FaceDetectorMode.LARGE_FACES;
		var detector = new affdex.CameraDetector(divRoot, width, height, faceMode);

		detector.detectAllEmotions();
		detector.detectAllEmojis();

		$("#startScanButton").on("click", function () {
			$("#startScanDiv").fadeIn(100).css("display", "flex");
		});

		$("#scanLaterButton").on("click", function () {
			$("#startScanDiv").fadeOut(100);
		});

		//countdown
		var countdownIntervalId;
		var isPaused = false;
		var offset = 0;
		var time;
		var output = $('#countdownMessage');
		var out2 = $("#notCenteredMessage");

		var resultObj = {
			"anger": 0.0,
			"contempt": 0.0,
			"disgust": 0.0,
			"fear": 0.0,
			"joy": 0.0,
			"sadness": 0.0,
			"surprise": 0.0,
			"count": 0,
		}

		function cleanResult(resultObj) {
			resultObj["anger"] = 0.0;
			resultObj["contempt"] = 0.0;
			resultObj["disgust"] = 0.0;
			resultObj["fear"] = 0.0;
			resultObj["joy"] = 0.0;
			resultObj["sadness"] = 0.0;
			resultObj["surprise"] = 0.0;
			resultObj["count"] = 0;
		}

		function finalizeResult(resultObj) {
			if (resultObj["count"] == 0) resultObj["count"] = 1;
			resultObj["anger"] = (resultObj["anger"] / resultObj["count"]);
			resultObj["contempt"] = (resultObj["contempt"] / resultObj["count"]);
			resultObj["disgust"] = (resultObj["disgust"] / resultObj["count"]);
			resultObj["fear"] = (resultObj["fear"] / resultObj["count"]);
			resultObj["joy"] = (resultObj["joy"] / resultObj["count"]);
			resultObj["sadness"] = (resultObj["sadness"] / resultObj["count"]);
			resultObj["surprise"] = (resultObj["surprise"] / resultObj["count"]);

			var overall = resultObj["anger"] + resultObj["contempt"] + resultObj["disgust"] + resultObj["fear"] + resultObj["joy"] + resultObj["sadness"] + resultObj["surprise"];
			if (overall == 0) overall = 1;

			resultObj["anger"] = (resultObj["anger"] / overall * 100);
			resultObj["contempt"] = (resultObj["contempt"] / overall * 100);
			resultObj["disgust"] = (resultObj["disgust"] / overall * 100);
			resultObj["fear"] = (resultObj["fear"] / overall * 100);
			resultObj["joy"] = (resultObj["joy"] / overall * 100);
			resultObj["sadness"] = (resultObj["sadness"] / overall * 100);
			resultObj["surprise"] = (resultObj["surprise"] / overall * 100);
		}

		var timer = new Timer();

		timer.addEventListener('secondsUpdated', function (e) {
			output.text("Scanning... " + timer.getTimeValues().toString() + "s left...");
		});

		timer.addEventListener('targetAchieved', function (e) {
			e.preventDefault();
			detector.stop();
			timer.stop();
			$("#toggleCamButton").fadeOut(100);
			$("notCenteredMessage").hide();
			$(".affectivaTest").fadeOut(100);
			output.text("Scanning done!");
			finalizeResult(resultObj);
			console.log(JSON.stringify(resultObj));			
			log('#avgRes', "Emotions in average: " + JSON.stringify(resultObj));
			$("#scanStopButton").fadeOut(100);

			var chart = new CanvasJS.Chart("resultChartContainer", {
				theme: "theme2",
				title: {
					text: "Your current emotion is"
				},
				data: [{
					type: "pie",
					indexLableFontSize: 40,
					backgroundColor: "rgba(255,187,114,0.9)",
					radius: 100,
					indexLabel: "{emotion} - {y}",
					yValueFormatString: "###0.0\"%\"",
					click: explodePie,
					dataPoints: [
						{ y: resultObj["anger"], emotion: "Anger" },
						{ y: resultObj["contempt"], emotion: "Contempt" },
						{ y: resultObj["disgust"], emotion: "Disgust" },
						{ y: resultObj["fear"], emotion: "Fear" },
						{ y: resultObj["joy"], emotion: "Joy" },
						{ y: resultObj["sadness"], emotion: "Sadness" },
						{ y: resultObj["surprise"], emotion: "Surprise" }
					]
				}]
			});
			chart.render();

			function explodePie(e) {
				for (var i = 0; i < e.dataSeries.dataPoints.length; i++) {
					if (i !== e.dataPointIndex)
						e.dataSeries.dataPoints[i].exploded = false;
				}
			}

			$("#scanResultDiv").fadeIn(100).css("display", "flex");
		});

		detector.addEventListener("onInitializeSuccess", function () {
			$(".affectivaTest").css("visibility", "visible");
			$("#toggleCamButton").fadeIn(100);
			cleanResult(resultObj);
			$("#notCenteredMessage").fadeOut(100);
			isOn = false;
			timer.start({ countdown: true, startValues: { seconds: 5 } });
		});

		detector.addEventListener("onImageResultsSuccess", function (faces, image, timestamp) {
			if (faces.length <= 0) {
				timer.pause();
				$("#notCenteredMessage").fadeIn(100);
			} else {
				$("#notCenteredMessage").fadeOut(100);
				timer.start();

				/* temp testing
				log('#timeStamp', "Timestamp: " + timestamp.toFixed(2));
				log('#numOfFace', "Number of faces found: " + faces.length);
				log('#emotionsRes', "Emotions: " + JSON.stringify(faces[0].emotions, function (key, val) {
					return val.toFixed ? Number(val.toFixed(0)) : val;
				}));*/
				log('#emojiRes', "Emoji: " + faces[0].emojis.dominantEmoji);
				// collect data into obj
				resultObj["anger"] += faces[0].emotions.anger;
				resultObj["contempt"] += faces[0].emotions.contempt;
				resultObj["disgust"] += faces[0].emotions.disgust;
				resultObj["fear"] += faces[0].emotions.fear;
				resultObj["joy"] += faces[0].emotions.joy;
				resultObj["sadness"] += faces[0].emotions.sadness;
				resultObj["surprise"] += faces[0].emotions.surprise;
				resultObj["count"]++;
			}
		});


		$("#scanOkButton").on("click", function () {
			detector.start();
			$("#startScanDiv").fadeOut(100);
			$("#scanningDiv").fadeIn(100).css("display", "flex");
			$("#toggleCamButton").hide();
			output.text("Initializing emotion Scanner...");
		});

		$("#scanStopButton").on("click", function () {
			detector.stop();
			timer.stop();
			$("#toggleCamButton").fadeOut(100);
			$(".affectivaTest").fadeOut(100);
			$("#notCenteredMessage").fadeOut(100);
			$(".resultMessages").text("");
			$("#scanningDiv").fadeOut(100);
		});

		$("#toggleCamButton").on("click", function () {
			if (!isOn) {
				isOn = !isOn;
				$(".affectivaTest").fadeIn(200);
			} else {
				isOn = !isOn;
				$(".affectivaTest").fadeOut(200);
			}
		});

		$("#resultDoneButton").on("click", function () {
			$("#notCenteredMessage").fadeOut(100);
			$(".resultMessages").text("");
			$("#scanResultDiv").fadeOut(100);
			$("#scanningDiv").fadeOut(100);
			$("#scanStopButton").css("display", "initial");
			$("#resultMemo").val("");
		});

		$("#loginButton").on("click", function(e) {
			if ($("#userNameBox").val() == "") {
				alert("User name can't be empty!");
			} else if ($("#passwordBox").val() == "") {
				alert("Password can't be empty!");				
			} else {
				$(".login").fadeOut(200);
			}
		});

	</script>


</body>

</html>